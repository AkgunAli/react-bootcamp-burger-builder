{"version":3,"sources":["constants/malzemeler.js","components/Malzemeler/Malzemeler.js","components/HamburgerApp/index.js","components/HamburgerApp/HamburgerApp.js","components/Hamburger/index.js","components/Hamburger/Hamburger.js","App.js","serviceWorker.js","index.js"],"names":["malzemeler","id","name","color","price","count","Malzemeler","malzeme","malzemeCikar","malzemeEkle","azaltButonunuGoster","secilenMalzemeler","key","width","onClick","className","classnames","disabled","enabled","HamburgerApp","props","varMi","state","find","secilenMalzeme","console","log","setState","map","secilen","filter","this","günceltoplam","reduce","toplam","Component","Hamburger","style","height","elements","malzemeDivi","backgroundColor","margin","marginTop","borderRadius","i","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92ba62b1.chunk.js","sourcesContent":["const malzemeler = [\r\n    {\r\n        id: 1,\r\n        name: \"Marul\",\r\n        color: \"green\",\r\n        price: 1,\r\n        count: 0\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Peynir\",\r\n        color: \"#ffa600\",\r\n        price: 4,\r\n        count: 0\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Köfte\",\r\n        color: \"black\",\r\n        price: 6,\r\n        count: 0\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Domates\",\r\n        color: \"red\",\r\n        price: 2,\r\n        count: 0\r\n    }\r\n];\r\n\r\nexport default malzemeler;\r\n","import React from 'react';\r\nimport classnames from \"classnames\";\r\nimport malzemeler from '../../constants/malzemeler';\r\n\r\n    \r\n\r\n    \r\n    \r\n    \r\n    \r\n\r\nconst Malzemeler = ({malzeme,malzemeCikar,malzemeEkle,azaltButonunuGoster,secilenMalzemeler}) => {\r\n    return ( \r\n\r\n        \r\n                <>\r\n\r\n\r\n\r\n                  \r\n                            <li key={malzeme.id}>\r\n                <table>\r\n                    <tbody>\r\n\r\n                        \r\n                  <tr>\r\n                    <td width=\"80px\"> <h3>{malzeme.name}</h3></td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          malzemeEkle(malzeme);\r\n                        \r\n                    \r\n                    \r\n                    }\r\n                    \r\n                    \r\n                    }\r\n                        className=\"malzeme-ekle\"\r\n                      >\r\n                        Ekle\r\n                      </button>\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          malzemeCikar(malzeme);\r\n\r\n                        }}\r\n                        className={classnames({\r\n                          \"malzeme-cikar\": true,\r\n                          disabled: !azaltButonunuGoster,\r\n                          enabled: azaltButonunuGoster,\r\n                        })}\r\n                      >Azalt\r\n                      </button>\r\n                    </td>\r\n                    <td>\r\n                     {`Ürün Tutarı: ${malzeme.price} TL`}\r\n                  \r\n                    \r\n\r\n\r\n                     </td>\r\n                     <td>\r\n\r\n\r\n                                       \r\n                     \r\n                    </td>\r\n                  </tr>\r\n                  </tbody>\r\n                </table>\r\n               \r\n              </li>\r\n\r\n                            \r\n                </>\r\n\r\n    );\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport default Malzemeler;","import HamburgerApp from \"./HamburgerApp\";\r\n\r\nexport default HamburgerApp;","import React, {Component} from 'react';\r\nimport malzemeler from \"../../constants/malzemeler\";\r\nimport \"./styles.css\";\r\nimport classnames from \"classnames\";\r\nimport {Hamburger} from \"../../components\";\r\nimport Malzemeler from \"../Malzemeler/Malzemeler\";\r\n\r\n\r\nclass HamburgerApp extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            secilenMalzemeler: []\r\n        \r\n        }\r\n    }\r\n\r\n    malzemeEkle = (malzeme) =>{\r\n        // var mi yok mu kontrol ediyoruz\r\n        const varMi = this.state.secilenMalzemeler.find((secilenMalzeme) => secilenMalzeme.id === malzeme.id);\r\n        // var ise sayisini artircaz, yok ise arraye ekliyoruz\r\n\r\n        console.log(\"var mi yok mu\", varMi);\r\n        if(varMi){\r\n            this.setState({\r\n                \r\n                secilenMalzemeler: this.state.secilenMalzemeler.map((secilenMalzeme) => {\r\n                    if(secilenMalzeme.id === malzeme.id){\r\n                        return {...secilenMalzeme, count: secilenMalzeme.count + 1}\r\n                    }else{\r\n                        return secilenMalzeme;\r\n\r\n                    }\r\n                })\r\n            })\r\n        }else{\r\n            this.setState({\r\n                secilenMalzemeler: [...this.state.secilenMalzemeler, {...malzeme, count: 1}]\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    malzemeCikar = (malzeme) => {\r\n        /// olmadigi durumda azalta hic basilamayacagi icin bu satirda malzemenin secili olduguna eminim.\r\n        const secilenMalzeme = this.state.secilenMalzemeler.find((secilen) => secilen.id === malzeme.id);\r\n        const secilenMalzemeCount = secilenMalzeme.count;\r\n        // sayi 1 ise secilenlerden tamamen cikartiyorum, 1 den buyuk ise bu sayiyi azaltiyorum\r\n        if(secilenMalzemeCount > 1){\r\n            this.setState({\r\n                secilenMalzemeler: this.state.secilenMalzemeler.map((secilen) => {\r\n                    if(secilen.id === malzeme.id){\r\n                        return {...secilen, count: secilen.count - 1}\r\n                    }\r\n                    return secilen;\r\n                })\r\n            })\r\n        }else{\r\n            this.setState({\r\n                secilenMalzemeler: this.state.secilenMalzemeler.filter((secilen) => {\r\n                    return secilen.id !== malzeme.id\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {secilenMalzemeler} = this.state;\r\n       \r\n            const toplamislemi =(toplam, malzeme) => toplam + (malzeme.count*malzeme.price); \r\n            const günceltoplam = secilenMalzemeler.reduce(toplamislemi,0);\r\n            \r\n\r\n        return (\r\n            <div>\r\n\r\n\r\n\r\n                <Hamburger secilenMalzemeler={secilenMalzemeler}/>\r\n                   <h2 >  Eklenecek Malzemeler</h2>\r\n                <ul>\r\n                    {\r\n                        malzemeler.map((malzeme) => {\r\n                            // mazeleme seculi ise azalt butonu aktif, degilse disabled\r\n                            const azaltButonunuGoster = secilenMalzemeler.find((secilenMalzeme) => secilenMalzeme.id === malzeme.id)\r\n\r\n\r\n                            return  < Malzemeler\r\n                            key = {malzemeler.key}\r\n                            malzeme = {malzeme}\r\n                            malzemeEkle = {this.malzemeEkle}\r\n                            malzemeCikar = {this.malzemeCikar}\r\n                            azaltButonunuGoster = {azaltButonunuGoster}\r\n                                    />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        })\r\n\r\n                    }\r\n\r\n                    <th> \r\n                    <h3> Toplam Fiyat : { günceltoplam}  TL </h3>    \r\n</th>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HamburgerApp;","import Hamburger from \"./Hamburger\";\r\n\r\nexport default Hamburger;","import React from 'react';\r\nimport \"./styles.css\";\r\nimport Malzemeler from \"../Malzemeler/Malzemeler\";\r\n\r\nconst Hamburger = (props) => {\r\n    // Kapsayici icin React fragment kullaniyoruz.\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"BreadTop\" style={{\r\n                    height: \"100px\"\r\n                }} />\r\n                {\r\n                    props.secilenMalzemeler.map((malzeme) => {\r\n                        const elements = [];\r\n                        const malzemeDivi = <div\r\n                            key={malzeme.id}\r\n                            style={{\r\n                                height: \"20px\",\r\n                                backgroundColor: malzeme.color,\r\n                                width: \"30%\",\r\n                                margin: \"0 auto\",\r\n                                marginTop: \"5px\",\r\n                                borderRadius:\"20px\"\r\n                            }}\r\n                        >\r\n                            {malzeme.name}\r\n                            {/* {malzeme.count} */}\r\n                         \r\n                          \r\n\r\n                        </div>;\r\n                        for(let i=0; i< malzeme.count;i++){\r\n                            elements.push(malzemeDivi);\r\n                        }\r\n\r\n\r\n                        \r\n\r\n                        return elements;\r\n                    })\r\n                }\r\n                <div className=\"BreadBottom\" style={{\r\n                    height: \"50px\"\r\n                }}/>\r\n            </div>\r\n\r\n          \r\n                    \r\n          \r\n        </>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default Hamburger;","import React from 'react';\r\nimport './App.css';\r\nimport {HamburgerApp} from \"./components\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <HamburgerApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}